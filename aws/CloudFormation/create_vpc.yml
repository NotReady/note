AWSTemplateFormatVersion: '2010-09-09'
Description: 'cfn training'
# Parametersはスタック作成時に指定する
Parameters:
  KeyPair:
    Description: KeyPair Name
    Type: AWS::EC2::KeyPair::KeyName
# テンプレート内からの指定はこちら
Mappings:
  StackConfig:
    EC2:
      ImageId: 'ami-923d12f5'
    IPAddress:
      MS: '121.117.160.85/32'
      VPC: '10.1.3.0/24'
      SUBNET1: '10.1.3.0/25'
      SUBNET2: '10.1.3.128/25'
Resources:
  # Create VPC
  VPCTemplate:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ StackConfig, IPAddress, VPC ]
      Tags:
      - Key: Name
        Value: VPCTemplate
  # Create Internet Gateway
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: VPCTemplate-IGW
  # Atacch Internet Gateway at VPC
  AttachIGWtoVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPCTemplate
      InternetGatewayId: !Ref IGW
  # Create Public RouteTable
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachIGWtoVPC
    Properties:
      VpcId: !Ref VPCTemplate
      Tags:
      - Key: Name
        Value: PublicRouteTable
  # Regist Route to Public RouteTable
  IGWRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachIGWtoVPC
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
  # Create Public Subnet 01
  PublicSubnet01:
    Type: AWS::EC2::Subnet
    DependsOn: AttachIGWtoVPC
    Properties:
      AvailabilityZone: ap-northeast-1a
      CidrBlock: !FindInMap [ StackConfig, IPAddress, SUBNET1 ]
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPCTemplate
      Tags:
      - Key: Name
        Value: PublicSubnet01
  # Create Public Subnet 02
  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      CidrBlock: !FindInMap [ StackConfig, IPAddress, SUBNET2 ]
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPCTemplate
      Tags:
      - Key: Name
        Value: PublicSubnet02
  # Associate RouteTable to Public Subnet
  PublicSubnetRouteTableAssociation01:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable
  # Associate RouteTable to Public Subnet
  PublicSubnetRouteTableAssociation02:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable
  # Create WebServers Security Group
  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebServerSG
      GroupDescription: SecurityGroup of webservers
      VpcId: !Ref VPCTemplate
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: !GetAtt VPCTemplate.CidrBlock
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: !FindInMap [ StackConfig, IPAddress, MS ]
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: !FindInMap [ StackConfig, IPAddress, MS ]
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !FindInMap [ StackConfig, IPAddress, MS ]
      Tags:
      - Key: Name
        Value: 'web-servers-sg'
  # Create db Servers Security Group
  DbServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: DbServerSG
      GroupDescription: SecurityGroup of dbservers
      VpcId: !Ref VPCTemplate
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp: !GetAtt VPCTemplate.CidrBlock
#        SourceSecurityGroupId: !Ref WebServerSG
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !FindInMap [ StackConfig, IPAddress, MS ]
      Tags:
      - Key: Name
        Value: 'db-servers-sg'
  # WEB_HOST_EC2_01:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     BlockDeviceMappings:
  #     - DeviceName: '/dev/xvda'
  #       Ebs:
  #         VolumeType: 'gp2'
  #         VolumeSize: 10
  #       ImageId: !FindInMap [ StackConfig, EC2, ImageId ]
  #       InstanceInitiatedShutdownBehavior: 'stop'
  #       InstanceType: 't2.micro'
  #       KeyName: !Ref KeyPair
  #       Monitoring: false
  #       SecurityGroupIds:
  #       - !GetAtt WebServerSG.GroupId
  #       SubnetId: !Ref PublicSubnet01
  #       Tenancy: 'default'
  #       UserData:
  #         Fn::Base64: !Sub  |
  #           #!/bin/bash
  #           yum -y update
  #       Tags:
  #       - Key: Name
  #         Value: webapp_01
  # WEB_HOST_EC2_02:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     BlockDeviceMappings:
  #     - DeviceName: '/dev/xvda'
  #       Ebs:
  #         VolumeType: 'gp2'
  #         VolumeSize: 10
  #       ImageId: !FindInMap [ StackConfig, EC2, ImageId ]
  #       InstanceInitiatedShutdownBehavior: 'stop'
  #       InstanceType: 't2.micro'
  #       KeyName: !Ref KeyPair
  #       Monitoring: false
  #       SecurityGroupIds:
  #       - !GetAtt WebServerSG.GroupId
  #       SubnetId: !Ref PublicSubnet02
  #       Tenancy: 'default'
  #       UserData:
  #         Fn::Base64: !Sub  |
  #           #!/bin/bash
  #           yum -y update
  #       Tags:
  #       - Key: Name
  #         Value: webapp_02
  # DB_HOST_EC2_01:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     BlockDeviceMappings:
  #     - DeviceName: '/dev/xvda'
  #       Ebs:
  #         VolumeType: 'gp2'
  #         VolumeSize: 10
  #       ImageId: !FindInMap [ StackConfig, EC2, ImageId ]
  #       InstanceInitiatedShutdownBehavior: 'stop'
  #       InstanceType: 't2.micro'
  #       KeyName: !Ref KeyPair
  #       Monitoring: false
  #       SecurityGroupIds:
  #       - !GetAtt DbServerSG.GroupId
  #       SubnetId: !Ref PublicSubnet01
  #       Tenancy: 'default'
  #       UserData:
  #         Fn::Base64: !Sub  |
  #           #!/bin/bash
  #           yum -y update
  #       Tags:
  #       - Key: Name
  #         Value: db_01
  # DB_HOST_EC2_02:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     BlockDeviceMappings:
  #     - DeviceName: '/dev/xvda'
  #       Ebs:
  #         VolumeType: 'gp2'
  #         VolumeSize: 10
  #       ImageId: !FindInMap [ StackConfig, EC2, ImageId ]
  #       InstanceInitiatedShutdownBehavior: 'stop'
  #       InstanceType: 't2.micro'
  #       KeyName: !Ref KeyPair
  #       Monitoring: false
  #       SecurityGroupIds:
  #       - !GetAtt DbServerSG.GroupId
  #       SubnetId: !Ref PublicSubnet02
  #       Tenancy: 'default'
  #       UserData:
  #         Fn::Base64: !Sub  |
  #           #!/bin/bash
  #           yum -y update
  #       Tags:
  #       - Key: Name
  #         Value: db_02